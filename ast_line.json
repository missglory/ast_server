"TranslationUnitDecl 0x92e968 <<invalid sloc>> <invalid sloc>_-666", 
"  TypedefDecl 0x92f1d0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'_-666", 
"    BuiltinType 0x92ef30 '__int128'_-666", 
"  TypedefDecl 0x92f240 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'_-666", 
"    BuiltinType 0x92ef50 'unsigned __int128'_-666", 
"  TypedefDecl 0x92f5b8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString '__NSConstantString_tag'_-666", 
"    RecordType 0x92f330 '__NSConstantString_tag'_-666", 
"      CXXRecord 0x92f298 '__NSConstantString_tag'_-666", 
"  TypedefDecl 0x92f650 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'_-666", 
"    PointerType 0x92f610 'char *'_-666", 
"      BuiltinType 0x92ea10 'char'_-666", 
"  TypedefDecl 0x973d98 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list '__va_list_tag[1]'_-666", 
"    ConstantArrayType 0x973d40 '__va_list_tag[1]' 1_-666", 
"      RecordType 0x92f740 '__va_list_tag'_-666", 
"        CXXRecord 0x92f6a8 '__va_list_tag'_-666", 
"  FunctionDecl 0x973e80 <document.cc:368:1, col:41> col:25 invalid LiveDocumentSet 'int &()' static_-666", 
"  NamespaceDecl 0x973f20 <line:371:1, line:9131:1> line:371:11 blink_371", 
"    NamespaceDecl 0x973f90 <line:373:1, line:453:1> line:373:11_373", 
"      EnumDecl 0x974058 <line:378:1, line:392:1> line:378:12 referenced class RequestStorageResult 'int'_378", 
"        EnumConstantDecl 0x974160 <line:379:3, col:30> col:3 APPROVED_EXISTING_ACCESS 'blink::(anonymous namespace)::RequestStorageResult'_379", 
"          ConstantExpr 0x974140 <col:30> 'int'_379", 
"            value: Int 0_379", 
"            IntegerLiteral 0x974120 <col:30> 'int' 0_379", 
"        EnumConstantDecl 0x9741f0 <line:380:3, col:24> col:3 APPROVED_NEW_GRANT 'blink::(anonymous namespace)::RequestStorageResult'_380", 
"          ConstantExpr 0x9741d0 <col:24> 'int'_380", 
"            value: Int 1_380", 
"            IntegerLiteral 0x9741b0 <col:24> 'int' 1_380", 
"        EnumConstantDecl 0x974280 <line:381:3, col:30> col:3 REJECTED_NO_USER_GESTURE 'blink::(anonymous namespace)::RequestStorageResult'_381", 
"          ConstantExpr 0x974260 <col:30> 'int'_381", 
"            value: Int 2_381", 
"            IntegerLiteral 0x974240 <col:30> 'int' 2_381", 
"        EnumConstantDecl 0x974310 <line:382:3, col:24> col:3 REJECTED_NO_ORIGIN 'blink::(anonymous namespace)::RequestStorageResult'_382", 
"          ConstantExpr 0x9742f0 <col:24> 'int'_382", 
"            value: Int 3_382", 
"            IntegerLiteral 0x9742d0 <col:24> 'int' 3_382", 
"        EnumConstantDecl 0x9743a0 <line:383:3, col:28> col:3 REJECTED_OPAQUE_ORIGIN 'blink::(anonymous namespace)::RequestStorageResult'_383", 
"          ConstantExpr 0x974380 <col:28> 'int'_383", 
"            value: Int 4_383", 
"            IntegerLiteral 0x974360 <col:28> 'int' 4_383", 
"        EnumConstantDecl 0x974430 <line:384:3, col:30> col:3 REJECTED_EXISTING_DENIAL 'blink::(anonymous namespace)::RequestStorageResult'_384", 
"          ConstantExpr 0x974410 <col:30> 'int'_384", 
"            value: Int 5_384", 
"            IntegerLiteral 0x9743f0 <col:30> 'int' 5_384", 
"        EnumConstantDecl 0x9744c0 <line:385:3, col:24> col:3 REJECTED_SANDBOXED 'blink::(anonymous namespace)::RequestStorageResult'_385", 
"          ConstantExpr 0x9744a0 <col:24> 'int'_385", 
"            value: Int 6_385", 
"            IntegerLiteral 0x974480 <col:24> 'int' 6_385", 
"        EnumConstantDecl 0x974550 <line:386:3, col:27> col:3 REJECTED_GRANT_DENIED 'blink::(anonymous namespace)::RequestStorageResult'_386", 
"          ConstantExpr 0x974530 <col:27> 'int'_386", 
"            value: Int 7_386", 
"            IntegerLiteral 0x974510 <col:27> 'int' 7_386", 
"        EnumConstantDecl 0x9745e0 <line:387:3, col:30> col:3 REJECTED_INCORRECT_FRAME 'blink::(anonymous namespace)::RequestStorageResult'_387", 
"          ConstantExpr 0x9745c0 <col:30> 'int'_387", 
"            value: Int 8_387", 
"            IntegerLiteral 0x9745a0 <col:30> 'int' 8_387", 
"        EnumConstantDecl 0x974670 <line:388:3, col:31> col:3 REJECTED_INSECURE_CONTEXT 'blink::(anonymous namespace)::RequestStorageResult'_388", 
"          ConstantExpr 0x974650 <col:31> 'int'_388", 
"            value: Int 9_388", 
"            IntegerLiteral 0x974630 <col:31> 'int' 9_388", 
"        EnumConstantDecl 0x974700 <line:389:3, col:28> col:3 APPROVED_PRIMARY_FRAME 'blink::(anonymous namespace)::RequestStorageResult'_389", 
"          ConstantExpr 0x9746e0 <col:28> 'int'_389", 
"            value: Int 10_389", 
"            IntegerLiteral 0x9746c0 <col:28> 'int' 10_389", 
"        EnumConstantDecl 0x974790 <line:390:3, col:44> col:3 referenced APPROVED_SAMEORIGIN_WITH_PRIMARY_FRAME 'blink::(anonymous namespace)::RequestStorageResult'_390", 
"          ConstantExpr 0x974770 <col:44> 'int'_390", 
"            value: Int 11_390", 
"            IntegerLiteral 0x974750 <col:44> 'int' 11_390", 
"        EnumConstantDecl 0x974820 <line:391:3, col:15> col:3 kMaxValue 'blink::(anonymous namespace)::RequestStorageResult'_391", 
"          ConstantExpr 0x974800 <col:15> 'int'_391", 
"            value: Int 11_391", 
"            DeclRefExpr 0x9747e0 <col:15> 'int' EnumConstant 0x974790 'APPROVED_SAMEORIGIN_WITH_PRIMARY_FRAME' 'blink::(anonymous namespace)::RequestStorageResult'_391", 
"      FunctionDecl 0x974948 <line:393:1, line:396:1> line:393:6 FireRequestStorageAccessHistogram 'void (blink::(anonymous namespace)::RequestStorageResult)'_393", 
"        ParmVarDecl 0x974880 <col:40, col:61> col:61 used result 'blink::(anonymous namespace)::RequestStorageResult'_393", 
"        CompoundStmt 0x974ac8 <col:69, line:396:1>_393", 
"      FunctionDecl 0x974b78 <line:398:1, line:401:1> line:398:6 FireRequestStorageAccessForOriginHistogram 'void (blink::(anonymous namespace)::RequestStorageResult)'_398", 
"        ParmVarDecl 0x974ae8 <col:49, col:70> col:70 used result 'blink::(anonymous namespace)::RequestStorageResult'_398", 
"        CompoundStmt 0x974d08 <col:78, line:401:1>_398", 
"      CXXRecordDecl 0x9bbaa0 <line:403:1, line:406:1> line:403:7 class IntrinsicSizeResizeObserverDelegate definition_403", 
"        DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init_403", 
"          DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr_403", 
"          CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param_403", 
"          MoveConstructor exists simple trivial needs_implicit_403", 
"          CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param_403", 
"          MoveAssignment exists simple trivial needs_implicit_403", 
"          Destructor simple irrelevant trivial needs_implicit_403", 
"        CXXRecordDecl 0x9bbbb8 <col:1, col:7> col:7 implicit class IntrinsicSizeResizeObserverDelegate_403", 
"        AccessSpecDecl 0x9bbc48 <line:404:2, col:8> col:2 public_404", 
"        CXXMethodDecl 0x9bbdd8 <line:405:3, col:73> col:8 invalid OnResize 'void (const int &)'_405", 
"          ParmVarDecl 0x9bbce0 <col:17, col:64> col:64 invalid entries 'const int &'_405", 
"          FinalAttr 0x9bbe80 <col:73> final_405", 
"      FunctionDecl 0x9bbfd8 <line:411:1, line:421:1> line:411:6 invalid IsInIndeterminateObjectAncestor 'bool (const int *)'_411", 
"        ParmVarDecl 0x9bbf18 <col:38, col:53> col:53 invalid element 'const int *'_411", 
"        CompoundStmt 0x9bc2f8 <col:62, line:421:1>_411", 
"          IfStmt 0x9bc0c0 <line:412:3, line:413:12>_412", 
"            RecoveryExpr 0x9bc080 <line:412:7, col:29> 'bool' contains errors_412", 
"            ReturnStmt 0x9bc0b0 <line:413:5, col:12>_413", 
"              CXXBoolLiteralExpr 0x9bc0a0 <col:12> 'bool' false_413", 
"          ReturnStmt 0x9bc2e8 <line:420:3, col:10>_420", 
"            CXXBoolLiteralExpr 0x9bc2d8 <col:10> 'bool' false_420", 
"      FunctionDecl 0x9bc4d8 <line:426:1, line:431:1> line:426:6 invalid NotifyPriorityScrollAnchorStatusChanged 'void (int *, int *)'_426", 
"        ParmVarDecl 0x9bc370 <col:46, col:52> col:52 invalid first 'int *'_426", 
"        ParmVarDecl 0x9bc400 <col:59, col:65> col:65 invalid second 'int *'_426", 
"        CompoundStmt 0x9bc5c8 <col:73, line:431:1>_426", 
"      FunctionDecl 0x9bc768 <line:437:1, line:451:1> line:437:6 invalid DefaultFaviconAllowedByCSP 'bool (const int *, const int &)'_437", 
"        ParmVarDecl 0x9bc600 <col:33, col:49> col:49 invalid document 'const int *'_437", 
"        ParmVarDecl 0x9bc690 <col:59, col:74> col:74 invalid icon 'const int &'_437", 
"        CompoundStmt 0x9bc938 <col:80, line:451:1>_437", 
"          DeclStmt 0x9bc8a8 <line:438:3, col:62>_438", 
"            VarDecl 0x9bc840 <col:3, col:21> col:21 invalid context 'int *'_438", 
"          IfStmt 0x9bc918 <line:439:3, line:445:3>_439", 
"            RecoveryExpr 0x9bc8c0 <line:439:7, col:8> 'bool' contains errors_439", 
"            CompoundStmt 0x9bc900 <col:17, line:445:3>_439", 
"              ReturnStmt 0x9bc8f0 <line:444:5, col:12>_444", 
"                CXXBoolLiteralExpr 0x9bc8e0 <col:12> 'bool' false_444", 
"    UsingDirectiveDecl 0x974000 <line:373:11, <invalid sloc>> <invalid sloc> implicit Namespace 0x973f90 ''_373", 
"    VarDecl 0x9bc988 <line:455:1, col:50> col:23 kCMaxWriteRecursionDepth 'const unsigned int' static cinit_455", 
"      ImplicitCastExpr 0x9bca10 <col:50> 'const unsigned int' <IntegralCast>_455", 
"        IntegerLiteral 0x9bc9f0 <col:50> 'int' 21_455", 
"    VarDecl 0x9c2700 <line:461:1, col:30> col:30 invalid kCLayoutScheduleThreshold 'const int' static_461", 
"    FunctionDecl 0x9c2878 <line:489:1, line:518:1> line:489:20 invalid IsValidNameStart 'bool (int)' static inline_489", 
"      ParmVarDecl 0x9c27b0 <col:37, col:45> col:45 invalid c 'int'_489", 
"      CompoundStmt 0x9c2d70 <col:48, line:518:1>_489", 
"        IfStmt 0x9c2a00 <line:491:3, line:492:12>_491", 
"          RecoveryExpr 0x9c29c0 <line:491:7, col:72> 'bool' contains errors_491", 
"          ReturnStmt 0x9c29f0 <line:492:5, col:12>_492", 
"            CXXBoolLiteralExpr 0x9c29e0 <col:12> 'bool' true_492", 
"        IfStmt 0x9c2a90 <line:495:3, line:496:12>_495", 
"          RecoveryExpr 0x9c2a50 <line:495:7, col:24> 'bool' contains errors_495", 
"          ReturnStmt 0x9c2a80 <line:496:5, col:12>_496", 
"            CXXBoolLiteralExpr 0x9c2a70 <col:12> 'bool' true_496", 
"        DeclStmt 0x9c2b40 <line:499:3, line:502:35>_499", 
"          VarDecl 0x9c2ad8 <line:499:3, col:18> col:18 invalid kNameStartMask 'const int'_499", 
"        IfStmt 0x9c2b98 <line:503:3, line:504:12>_503", 
"          RecoveryExpr 0x9c2b58 <line:503:7, col:51> 'bool' contains errors_503", 
"          ReturnStmt 0x9c2b88 <line:504:5, col:12>_504", 
"            CXXBoolLiteralExpr 0x9c2b78 <col:12> 'bool' false_504", 
"        IfStmt 0x9c2c38 <line:507:3, line:508:12>_507", 
"          RecoveryExpr 0x9c2bf8 <line:507:7, col:26> 'bool' contains errors_507", 
"          ReturnStmt 0x9c2c28 <line:508:5, col:12>_508", 
"            CXXBoolLiteralExpr 0x9c2c18 <col:12> 'bool' false_508", 
"        DeclStmt 0x9c2cd8 <line:511:3, line:512:41>_511", 
"          VarDecl 0x9c2c70 <line:511:3, col:39> col:39 invalid decomp_type 'int'_511", 
"        IfStmt 0x9c2d30 <line:513:3, line:515:12>_513", 
"          RecoveryExpr 0x9c2cf0 <line:513:7, line:514:36> 'bool' contains errors_513", 
"          ReturnStmt 0x9c2d20 <line:515:5, col:12>_515", 
"            CXXBoolLiteralExpr 0x9c2d10 <col:12> 'bool' false_515", 
"        ReturnStmt 0x9c2d60 <line:517:3, col:10>_517", 
"          CXXBoolLiteralExpr 0x9c2d50 <col:10> 'bool' true_517", 
"    FunctionDecl 0x9c2e78 <line:520:1, line:553:1> line:520:20 invalid IsValidNamePart 'bool (int)' static inline_520", 
"      ParmVarDecl 0x9c2de8 <col:36, col:44> col:44 invalid c 'int'_520", 
"      CompoundStmt 0x9c33b8 <col:47, line:553:1>_520", 
"        IfStmt 0x9c2fa8 <line:522:3, line:523:12>_522", 
"          RecoveryExpr 0x9c2f68 <line:522:7, col:25> 'bool' contains errors_522", 
"          ReturnStmt 0x9c2f98 <line:523:5, col:12>_523", 
"            CXXBoolLiteralExpr 0x9c2f88 <col:12> 'bool' true_523", 
"        IfStmt 0x9c3048 <line:526:3, line:527:12>_526", 
"          RecoveryExpr 0x9c3008 <line:526:7, col:27> 'bool' contains errors_526", 
"          ReturnStmt 0x9c3038 <line:527:5, col:12>_527", 
"            CXXBoolLiteralExpr 0x9c3028 <col:12> 'bool' true_527", 
"        IfStmt 0x9c30d8 <line:530:3, line:531:12>_530", 
"          RecoveryExpr 0x9c3098 <line:530:7, col:24> 'bool' contains errors_530", 
"          ReturnStmt 0x9c30c8 <line:531:5, col:12>_531", 
"            CXXBoolLiteralExpr 0x9c30b8 <col:12> 'bool' true_531", 
"        DeclStmt 0x9c3188 <line:534:3, line:537:41>_534", 
"          VarDecl 0x9c3120 <line:534:3, col:18> col:18 invalid kOtherNamePartMask 'const int'_534", 
"        IfStmt 0x9c31e0 <line:538:3, line:539:12>_538", 
"          RecoveryExpr 0x9c31a0 <line:538:7, col:55> 'bool' contains errors_538", 
"          ReturnStmt 0x9c31d0 <line:539:5, col:12>_539", 
"            CXXBoolLiteralExpr 0x9c31c0 <col:12> 'bool' false_539", 
"        IfStmt 0x9c3280 <line:542:3, line:543:12>_542", 
"          RecoveryExpr 0x9c3240 <line:542:7, col:26> 'bool' contains errors_542", 
"          ReturnStmt 0x9c3270 <line:543:5, col:12>_543", 
"            CXXBoolLiteralExpr 0x9c3260 <col:12> 'bool' false_543", 
"        DeclStmt 0x9c3320 <line:546:3, line:547:41>_546", 
"          VarDecl 0x9c32b8 <line:546:3, col:39> col:39 invalid decomp_type 'int'_546", 
"        IfStmt 0x9c3378 <line:548:3, line:550:12>_548", 
"          RecoveryExpr 0x9c3338 <line:548:7, line:549:36> 'bool' contains errors_548", 
"          ReturnStmt 0x9c3368 <line:550:5, col:12>_550", 
"            CXXBoolLiteralExpr 0x9c3358 <col:12> 'bool' false_550", 
"        ReturnStmt 0x9c33a8 <line:552:3, col:10>_552", 
"          CXXBoolLiteralExpr 0x9c3398 <col:10> 'bool' true_552", 
"    FunctionTemplateDecl 0x9c3bc0 <line:557:1, line:572:1> line:558:20 IsValidElementNamePerHTMLParser_557", 
"      TemplateTypeParmDecl 0x9c3410 <line:557:11, col:20> col:20 referenced typename depth 0 index 0 CharType_557", 
"      FunctionDecl 0x9c3b20 <line:558:1, line:572:1> line:558:20 IsValidElementNamePerHTMLParser 'bool (const CharType *, unsigned int)' static inline_558", 
"        ParmVarDecl 0x9c3538 <col:52, col:68> col:68 referenced characters 'const CharType *'_558", 
"        ParmVarDecl 0x9c35b8 <line:559:52, col:61> col:61 referenced length 'unsigned int'_559", 
"        CompoundStmt 0x9c4530 <col:69, line:572:1>_559", 
"          DeclStmt 0x9c3db8 <line:560:3, col:36>_560", 
"            VarDecl 0x9c3cb0 <col:3, col:32> col:12 referenced c 'CharType' cinit_560", 
"              BinaryOperator 0x9c3d98 <col:16, col:32> '<dependent type>' ' '_560", 
"                ArraySubscriptExpr 0x9c3d58 <col:16, col:28> 'const CharType' lvalue_560", 
"                  DeclRefExpr 0x9c3d18 <col:16> 'const CharType *' lvalue ParmVar 0x9c3538 'characters' 'const CharType *'_560", 
"                  IntegerLiteral 0x9c3d38 <col:27> 'int' 0_560", 
"                IntegerLiteral 0x9c3d78 <col:32> 'int' 32_560", 
"          IfStmt 0x9c3ef8 <line:561:3, line:562:12>_561", 
"            UnaryOperator 0x9c3ec0 <line:561:7, col:29> '<dependent type>' prefix '!' cannot overflow_561", 
"              ParenExpr 0x9c3ea0 <col:8, col:29> '<dependent type>'_561", 
"                BinaryOperator 0x9c3e80 <col:9, col:26> '<dependent type>' '&&'_561", 
"                  BinaryOperator 0x9c3e08 <col:9, col:16> '<dependent type>' '<='_561", 
"                    CharacterLiteral 0x9c3dd0 <col:9> 'char' 97_561", 
"                    DeclRefExpr 0x9c3de8 <col:16> 'CharType' lvalue Var 0x9c3cb0 'c' 'CharType'_561", 
"                  BinaryOperator 0x9c3e60 <col:21, col:26> '<dependent type>' '<='_561", 
"                    DeclRefExpr 0x9c3e28 <col:21> 'CharType' lvalue Var 0x9c3cb0 'c' 'CharType'_561", 
"                    CharacterLiteral 0x9c3e48 <col:26> 'char' 122_561", 
"            ReturnStmt 0x9c3ee8 <line:562:5, col:12>_562", 
"              CXXBoolLiteralExpr 0x9c3ed8 <col:12> 'bool' false_562", 
"          ForStmt 0x9c44d8 <line:564:3, line:569:3>_564", 
"            DeclStmt 0x9c3fd0 <line:564:8, col:22>_564", 
"              VarDecl 0x9c3f30 <col:8, col:21> col:17 referenced i 'unsigned int' cinit_564", 
"                ImplicitCastExpr 0x9c3fb8 <col:21> 'unsigned int' <IntegralCast>_564", 
"                  IntegerLiteral 0x9c3f98 <col:21> 'int' 1_564", 
"            <<<NULL>>> _564", 
"            BinaryOperator 0x9c4058 <col:24, col:28> 'bool' '<'_564", 
"              ImplicitCastExpr 0x9c4028 <col:24> 'unsigned int' <LValueToRValue>_564", 
"                DeclRefExpr 0x9c3fe8 <col:24> 'unsigned int' lvalue Var 0x9c3f30 'i' 'unsigned int'_564", 
"              ImplicitCastExpr 0x9c4040 <col:28> 'unsigned int' <LValueToRValue>_564", 
"                DeclRefExpr 0x9c4008 <col:28> 'unsigned int' lvalue ParmVar 0x9c35b8 'length' 'unsigned int'_564", 
"            UnaryOperator 0x9c4098 <col:36, col:38> 'unsigned int' lvalue prefix '++'_564", 
"              DeclRefExpr 0x9c4078 <col:38> 'unsigned int' lvalue Var 0x9c3f30 'i' 'unsigned int'_564", 
"            CompoundStmt 0x9c44b8 <col:41, line:569:3>_564", 
"              BinaryOperator 0x9c4130 <line:565:5, col:21> '<dependent type>' '='_565", 
"                DeclRefExpr 0x9c40b0 <col:5> 'CharType' lvalue Var 0x9c3cb0 'c' 'CharType'_565", 
"                ArraySubscriptExpr 0x9c4110 <col:9, col:21> 'const CharType' lvalue_565", 
"                  DeclRefExpr 0x9c40d0 <col:9> 'const CharType *' lvalue ParmVar 0x9c3538 'characters' 'const CharType *'_565", 
"                  DeclRefExpr 0x9c40f0 <col:20> 'unsigned int' lvalue Var 0x9c3f30 'i' 'unsigned int'_565", 
"              IfStmt 0x9c4498 <line:566:5, line:568:14>_566", 
"                BinaryOperator 0x9c4458 <line:566:9, line:567:26> '<dependent type>' ' '_566", 
"                  BinaryOperator 0x9c43e0 <line:566:9, line:567:14> '<dependent type>' ' '_566", 
"                    BinaryOperator 0x9c4368 <line:566:9, col:66> '<dependent type>' ' '_566", 
"                      BinaryOperator 0x9c42f0 <col:9, col:53> '<dependent type>' ' '_566", 
"                        BinaryOperator 0x9c4278 <col:9, col:40> '<dependent type>' ' '_566", 
"                          BinaryOperator 0x9c4200 <col:9, col:27> '<dependent type>' ' '_566", 
"                            BinaryOperator 0x9c4188 <col:9, col:14> '<dependent type>' '=='_566", 
"                              DeclRefExpr 0x9c4150 <col:9> 'CharType' lvalue Var 0x9c3cb0 'c' 'CharType'_566", 
"                              CharacterLiteral 0x9c4170 <col:14> 'char' 9_566", 
"                            BinaryOperator 0x9c41e0 <col:22, col:27> '<dependent type>' '=='_566", 
"                              DeclRefExpr 0x9c41a8 <col:22> 'CharType' lvalue Var 0x9c3cb0 'c' 'CharType'_566", 
"                              CharacterLiteral 0x9c41c8 <col:27> 'char' 10_566", 
"                          BinaryOperator 0x9c4258 <col:35, col:40> '<dependent type>' '=='_566", 
"                            DeclRefExpr 0x9c4220 <col:35> 'CharType' lvalue Var 0x9c3cb0 'c' 'CharType'_566", 
"                            CharacterLiteral 0x9c4240 <col:40> 'char' 12_566", 
"                        BinaryOperator 0x9c42d0 <col:48, col:53> '<dependent type>' '=='_566", 
"                          DeclRefExpr 0x9c4298 <col:48> 'CharType' lvalue Var 0x9c3cb0 'c' 'CharType'_566", 
"                          CharacterLiteral 0x9c42b8 <col:53> 'char' 13_566", 
"                      BinaryOperator 0x9c4348 <col:61, col:66> '<dependent type>' '=='_566", 
"                        DeclRefExpr 0x9c4310 <col:61> 'CharType' lvalue Var 0x9c3cb0 'c' 'CharType'_566", 
"                        CharacterLiteral 0x9c4330 <col:66> 'char' 32_566", 
"                    BinaryOperator 0x9c43c0 <line:567:9, col:14> '<dependent type>' '=='_567", 
"                      DeclRefExpr 0x9c4388 <col:9> 'CharType' lvalue Var 0x9c3cb0 'c' 'CharType'_567", 
"                      CharacterLiteral 0x9c43a8 <col:14> 'char' 47_567", 
"                  BinaryOperator 0x9c4438 <col:21, col:26> '<dependent type>' '=='_567", 
"                    DeclRefExpr 0x9c4400 <col:21> 'CharType' lvalue Var 0x9c3cb0 'c' 'CharType'_567", 
"                    CharacterLiteral 0x9c4420 <col:26> 'char' 62_567", 
"                ReturnStmt 0x9c4488 <line:568:7, col:14>_568", 
"                  CXXBoolLiteralExpr 0x9c4478 <col:14> 'bool' false_568", 
"          ReturnStmt 0x9c4520 <line:571:3, col:10>_571", 
"            CXXBoolLiteralExpr 0x9c4510 <col:10> 'bool' true_571", 
"    FunctionDecl 0x9c4648 <line:574:1, line:585:1> line:574:13 invalid IsValidElementNamePerHTMLParser 'bool (const int &)' static_574", 
"      ParmVarDecl 0x9c4588 <col:45, col:59> col:59 invalid name 'const int &'_574", 
"      CompoundStmt 0x9c4ab8 <col:65, line:585:1>_574", 
"        DeclStmt 0x9c4780 <line:575:3, col:34>_575", 
"          VarDecl 0x9c4718 <col:3, col:12> col:12 used length 'unsigned int'_575", 
"        IfStmt 0x9c4820 <line:576:3, line:577:12>_576", 
"          UnaryOperator 0x9c47e8 <line:576:7, col:8> 'bool' prefix '!' cannot overflow_576", 
"            ImplicitCastExpr 0x9c47d0 <col:8> 'bool' <IntegralToBoolean>_576", 
"              ImplicitCastExpr 0x9c47b8 <col:8> 'unsigned int' <LValueToRValue>_576", 
"                DeclRefExpr 0x9c4798 <col:8> 'unsigned int' lvalue Var 0x9c4718 'length' 'unsigned int'_576", 
"          ReturnStmt 0x9c4810 <line:577:5, col:12>_577", 
"            CXXBoolLiteralExpr 0x9c4800 <col:12> 'bool' false_577", 
"        IfStmt 0x9c4988 <line:579:3, line:582:3>_579", 
"          RecoveryExpr 0x9c4840 <line:579:7, col:19> 'bool' contains errors_579", 
"          CompoundStmt 0x9c4970 <col:22, line:582:3>_579", 
"            DeclStmt 0x9c48f0 <line:580:5, col:49>_580", 
"              VarDecl 0x9c4888 <col:5, col:18> col:18 invalid characters 'const int *'_580", 
"        DeclStmt 0x9c4a38 <line:583:3, col:48>_583", 
"          VarDecl 0x9c49d0 <col:3, col:16> col:16 invalid characters 'const int *'_583", 
"    FunctionDecl 0x9c4ea8 <line:590:1, line:603:1> line:590:13 invalid IsValidElementName 'bool (int *, const int &)' static_590", 
"      ParmVarDecl 0x9c4d40 <col:32, col:42> col:42 invalid document 'int *'_590", 
"      ParmVarDecl 0x9c4dd0 <col:52, col:66> col:66 invalid name 'const int &'_590", 
"      CompoundStmt 0x9c5288 <col:72, line:603:1>_590", 
"        DeclStmt 0x9c4fd0 <line:591:3, col:55>_591", 
"          VarDecl 0x9c4f68 <col:3, col:8> col:8 used is_valid_dom_name 'bool'_591", 
"        DeclStmt 0x9c50a8 <line:592:3, col:66>_592", 
"          VarDecl 0x9c4ff8 <col:3, col:8> col:8 used is_valid_html_name 'bool'_592", 
"        IfStmt 0x9c5220 <line:593:3, line:601:3>_593", 
"          RecoveryExpr 0x9c51c0 <line:593:7, col:55> '<dependent type>' contains errors lvalue_593", 
"            UnresolvedLookupExpr 0x9c50c0 <col:7> '<overloaded function type>' lvalue (ADL) = 'UNLIKELY' empty_593", 
"            BinaryOperator 0x9c51a0 <col:16, col:38> 'bool' '!='_593", 
"              ImplicitCastExpr 0x9c5170 <col:16> 'int' <IntegralCast>_593", 
"                ImplicitCastExpr 0x9c5140 <col:16> 'bool' <LValueToRValue>_593", 
"                  DeclRefExpr 0x9c5100 <col:16> 'bool' lvalue Var 0x9c4ff8 'is_valid_html_name' 'bool'_593", 
"              ImplicitCastExpr 0x9c5188 <col:38> 'int' <IntegralCast>_593", 
"                ImplicitCastExpr 0x9c5158 <col:38> 'bool' <LValueToRValue>_593", 
"                  DeclRefExpr 0x9c5120 <col:38> 'bool' lvalue Var 0x9c4f68 'is_valid_dom_name' 'bool'_593", 
"          CompoundStmt 0x9c5210 <col:58, line:601:3>_593", 
"        ReturnStmt 0x9c5278 <line:602:3, col:10>_602", 
"          ImplicitCastExpr 0x9c5260 <col:10> 'bool' <LValueToRValue>_602", 
"            DeclRefExpr 0x9c5240 <col:10> 'bool' lvalue Var 0x9c4f68 'is_valid_dom_name' 'bool'_602", 
"    FunctionDecl 0x9c5370 <line:605:1, line:609:1> line:605:13 invalid AcceptsEditingFocus 'bool (const int &)' static_605", 
"      ParmVarDecl 0x9c52e0 <col:33, col:48> col:48 invalid element 'const int &'_605", 
"      CompoundStmt 0x9c54d8 <col:57, line:609:1>_605", 
"    VarDecl 0x9c5508 <line:613:1, col:55> col:13 g_force_synchronous_parsing_for_testing 'bool' static cinit_613", 
"      CXXBoolLiteralExpr 0x9c5570 <col:55> 'bool' false_613", 
"    CXXMethodDecl 0x9c56d0 parent 0x9bbaa0 <line:615:1, line:621:1> line:615:43 invalid OnResize 'void (const int &)'_615", 
"      ParmVarDecl 0x9c5640 <line:616:5, col:52> col:52 invalid entries 'const int &'_616", 
"      CompoundStmt 0x9c5960 <col:61, line:621:1>_616", 
"    FunctionDecl 0x9c7870 <line:1114:1, line:1135:1> line:1114:14 invalid GetTypeExtension 'int (int *, const int *)'_1114", 
"      ParmVarDecl 0x9c7700 <line:1115:5, col:15> col:15 invalid document 'int *'_1115", 
"      ParmVarDecl 0x9c7790 <line:1116:5, col:50> col:50 invalid string_or_options 'const int *'_1116", 
"      CompoundStmt 0x9c7c80 <col:69, line:1135:1>_1116", 
"        SwitchStmt 0x9c7980 <line:1119:3, line:1132:3>_1119", 
"          RecoveryExpr 0x9c7960 <line:1119:11, col:45> 'int' contains errors_1119", 
"          CompoundStmt 0x9c7b88 <col:48, line:1132:3>_1119", 
"            CompoundStmt 0x9c7b28 <line:1121:34, line:1127:5>_1121", 
"              DeclStmt 0x9c7a38 <line:1122:7, line:1123:59>_1122", 
"                VarDecl 0x9c79d0 <line:1122:7, col:37> col:37 invalid options 'const int *'_1122", 
"              ReturnStmt 0x9c7b18 <line:1126:7, col:27>_1126", 
"                RecoveryExpr 0x9c7af0 <col:14, col:27> '<dependent type>' contains errors lvalue_1126", 
"                  UnresolvedLookupExpr 0x9c7ab0 <col:14> '<overloaded function type>' lvalue (ADL) = 'AtomicString' empty_1126", 
"        RecoveryExpr 0x9c7be0 <line:1133:3, col:14> '<dependent type>' contains errors lvalue_1133", 
"          UnresolvedLookupExpr 0x9c7ba0 <col:3> '<overloaded function type>' lvalue (ADL) = 'NOTREACHED' empty_1133", 
"        ReturnStmt 0x9c7c70 <line:1134:3, col:23>_1134", 
"          RecoveryExpr 0x9c7c48 <col:10, col:23> '<dependent type>' contains errors lvalue_1134", 
"            UnresolvedLookupExpr 0x9c7c08 <col:10> '<overloaded function type>' lvalue (ADL) = 'AtomicString' empty_1134", 
"    FunctionDecl 0x9cd110 <line:1171:1, line:1191:1> line:1171:29 invalid CreateQualifiedName 'int (const int &, const int &, int &)' static inline_1171", 
"      ParmVarDecl 0x9ccf08 <line:1172:5, col:25> col:25 invalid namespace_uri 'const int &'_1172", 
"      ParmVarDecl 0x9ccf98 <line:1173:5, col:25> col:25 invalid qualified_name 'const int &'_1173", 
"      ParmVarDecl 0x9cd028 <line:1174:5, col:21> col:21 invalid exception_state 'int &'_1174", 
"      CompoundStmt 0x9cd5a8 <col:38, line:1191:1>_1174", 
"        DeclStmt 0x9cd258 <line:1175:3, col:34>_1175", 
"          VarDecl 0x9cd1f0 <col:3, col:16> col:16 invalid prefix 'int'_1175", 
"        DeclStmt 0x9cd320 <line:1180:3, col:58>_1180", 
"          VarDecl 0x9cd2b8 <col:3, col:17> col:17 invalid q_name 'int'_1180", 
"        IfStmt 0x9cd588 <line:1181:3, line:1188:3>_1181", 
"          RecoveryExpr 0x9cd338 <line:1181:7, col:53> 'bool' contains errors_1181", 
"          CompoundStmt 0x9cd578 <col:56, line:1188:3>_1181", 
"    FunctionTemplateDecl 0x9cfd50 <line:1608:1, line:1637:1> line:1609:22 invalid CanonicalizedTitle_1608", 
"      TemplateTypeParmDecl 0x9cfa78 <line:1608:11, col:20> col:20 referenced typename depth 0 index 0 CharacterType_1608", 
"      FunctionDecl 0x9cfcb0 <line:1609:1, line:1637:1> line:1609:22 invalid CanonicalizedTitle 'int (int *, const int &)' static inline_1609", 
"        ParmVarDecl 0x9cfb48 <col:41, col:51> col:51 invalid document 'int *'_1609", 
"        ParmVarDecl 0x9cfbd8 <line:1610:41, col:55> col:55 invalid title 'const int &'_1610", 
"        CompoundStmt 0x9d26d8 <col:62, line:1637:1>_1610", 
"          DeclStmt 0x9d1e78 <line:1611:3, col:35>_1611", 
"            VarDecl 0x9d1e10 <col:3, col:12> col:12 referenced length 'unsigned int'_1611", 
"          DeclStmt 0x9d1f48 <line:1612:3, col:29>_1612", 
"            VarDecl 0x9d1ea8 <col:3, col:28> col:12 referenced builder_index 'unsigned int' cinit_1612", 
"              ImplicitCastExpr 0x9d1f30 <col:28> 'unsigned int' <IntegralCast>_1612", 
"                IntegerLiteral 0x9d1f10 <col:28> 'int' 0_1612", 
"          DeclStmt 0x9d2020 <line:1613:3, col:73>_1613", 
"            VarDecl 0x9d1f98 <col:3, col:24> col:24 referenced characters 'const CharacterType *'_1613", 
"          DeclStmt 0x9d20e0 <line:1618:3, col:34>_1618", 
"            VarDecl 0x9d2068 <col:3, col:29> col:8 referenced pending_whitespace 'bool' cinit_1618", 
"              CXXBoolLiteralExpr 0x9d20d0 <col:29> 'bool' false_1618", 
"          ForStmt 0x9d2680 <line:1619:3, line:1633:3>_1619", 
"            DeclStmt 0x9d21b0 <line:1619:8, col:22>_1619", 
"              VarDecl 0x9d2110 <col:8, col:21> col:17 referenced i 'unsigned int' cinit_1619", 
"                ImplicitCastExpr 0x9d2198 <col:21> 'unsigned int' <IntegralCast>_1619", 
"                  IntegerLiteral 0x9d2178 <col:21> 'int' 0_1619", 
"            <<<NULL>>> _1619", 
"            BinaryOperator 0x9d2238 <col:24, col:28> 'bool' '<'_1619", 
"              ImplicitCastExpr 0x9d2208 <col:24> 'unsigned int' <LValueToRValue>_1619", 
"                DeclRefExpr 0x9d21c8 <col:24> 'unsigned int' lvalue Var 0x9d2110 'i' 'unsigned int'_1619", 
"              ImplicitCastExpr 0x9d2220 <col:28> 'unsigned int' <LValueToRValue>_1619", 
"                DeclRefExpr 0x9d21e8 <col:28> 'unsigned int' lvalue Var 0x9d1e10 'length' 'unsigned int'_1619", 
"            UnaryOperator 0x9d2278 <col:36, col:38> 'unsigned int' lvalue prefix '++'_1619", 
"              DeclRefExpr 0x9d2258 <col:38> 'unsigned int' lvalue Var 0x9d2110 'i' 'unsigned int'_1619", 
"            CompoundStmt 0x9d2660 <col:41, line:1633:3>_1619", 
"              DeclStmt 0x9d2380 <line:1620:5, col:30>_1620", 
"                VarDecl 0x9d22b8 <col:5, col:13> col:13 invalid c 'int'_1620", 
"              IfStmt 0x9d2630 <line:1621:5, line:1632:5> has_else_1621", 
"                RecoveryExpr 0x9d2398 <line:1621:9, line:1623:28> 'bool' contains errors_1621", 
"                CompoundStmt 0x9d24b8 <col:46, line:1626:5>_1621", 
"                  IfStmt 0x9d2498 <line:1624:7, line:1625:30>_1624", 
"                    BinaryOperator 0x9d2428 <line:1624:11, col:28> 'bool' '!='_1624", 
"                      ImplicitCastExpr 0x9d23f8 <col:11> 'unsigned int' <LValueToRValue>_1624", 
"                        DeclRefExpr 0x9d23b8 <col:11> 'unsigned int' lvalue Var 0x9d1ea8 'builder_index' 'unsigned int'_1624", 
"                      ImplicitCastExpr 0x9d2410 <col:28> 'unsigned int' <IntegralCast>_1624", 
"                        IntegerLiteral 0x9d23d8 <col:28> 'int' 0_1624", 
"                    BinaryOperator 0x9d2478 <line:1625:9, col:30> 'bool' lvalue '='_1625", 
"                      DeclRefExpr 0x9d2448 <col:9> 'bool' lvalue Var 0x9d2068 'pending_whitespace' 'bool'_1625", 
"                      CXXBoolLiteralExpr 0x9d2468 <col:30> 'bool' true_1625", 
"                CompoundStmt 0x9d2618 <line:1626:12, line:1632:5>_1626", 
"                  IfStmt 0x9d25c0 <line:1627:7, line:1630:7>_1627", 
"                    ImplicitCastExpr 0x9d24f0 <line:1627:11> 'bool' <LValueToRValue>_1627", 
"                      DeclRefExpr 0x9d24d0 <col:11> 'bool' lvalue Var 0x9d2068 'pending_whitespace' 'bool'_1627", 
"                    CompoundStmt 0x9d25a8 <col:31, line:1630:7>_1627", 
"                      BinaryOperator 0x9d2588 <line:1629:9, col:30> 'bool' lvalue '='_1629", 
"                        DeclRefExpr 0x9d2558 <col:9> 'bool' lvalue Var 0x9d2068 'pending_whitespace' 'bool'_1629", 
"                        CXXBoolLiteralExpr 0x9d2578 <col:30> 'bool' false_1629", 
"    FunctionDecl 0x9dd160 <line:3044:1, line:3056:1> line:3044:19 invalid ComputeAXModeFromAXContexts 'int (int)' static_3044", 
"      ParmVarDecl 0x9dd090 <col:47, col:66> col:66 invalid ax_contexts 'int'_3044", 
"      CompoundStmt 0x9dd508 <col:79, line:3056:1>_3044", 
"        DeclStmt 0x9dd2a8 <line:3045:3, col:25>_3045", 
"          VarDecl 0x9dd220 <col:3, col:14> col:14 invalid ax_mode 'int'_3045", 
"        IfStmt 0x9dd4e8 <line:3049:3, line:3053:3>_3049", 
"          RecoveryExpr 0x9dd368 <line:3049:7, col:26> 'bool' contains errors_3049", 
"          CompoundStmt 0x9dd4d8 <col:29, line:3053:3>_3049", 
"    NamespaceDecl 0x9dd528 prev 0x973f90 <line:3058:1, line:3066:1> line:3058:11_3058", 
"      original Namespace 0x973f90 ''_3058", 
"      VarDecl 0x9dd5c0 <line:3064:1, col:8> col:8 invalid g_ax_object_cache_count 'int'_3064", 
"    FunctionDecl 0x9e08d8 <line:3747:1, line:3766:1> line:3747:13 invalid AllDescendantsAreComplete 'bool (int *)' static_3747", 
"      ParmVarDecl 0x9e0818 <col:39, col:49> col:49 invalid document 'int *'_3747", 
"      CompoundStmt 0x9e0ee8 <col:59, line:3766:1>_3747", 
"        DeclStmt 0x9e0a10 <line:3748:3, col:38>_3748", 
"          VarDecl 0x9e09a8 <col:3, col:10> col:10 invalid frame 'int *'_3748", 
"        IfStmt 0x9e0a68 <line:3749:3, line:3750:12>_3749", 
"          RecoveryExpr 0x9e0a28 <line:3749:7, col:8> 'bool' contains errors_3749", 
"          ReturnStmt 0x9e0a58 <line:3750:5, col:12>_3750", 
"            CXXBoolLiteralExpr 0x9e0a48 <col:12> 'bool' true_3750", 
"        IfStmt 0x9e0ea8 <line:3758:3, line:3764:3>_3758", 
"          RecoveryExpr 0x9e0c88 <line:3758:7, col:53> 'bool' contains errors_3758", 
"          CompoundStmt 0x9e0e98 <col:56, line:3764:3>_3758", 
"        ReturnStmt 0x9e0ed8 <line:3765:3, col:10>_3765", 
"          CXXBoolLiteralExpr 0x9e0ec8 <col:10> 'bool' true_3765", 
"    NamespaceDecl 0x9e0f18 prev 0x9dd528 <line:3860:1, line:3875:1> line:3860:11_3860", 
"      original Namespace 0x973f90 ''_3860", 
"      EnumDecl 0x9e0f88 <line:3862:1, line:3869:1> line:3862:12 referenced class BeforeUnloadUse 'int'_3862", 
"        EnumConstantDecl 0x9e1050 <line:3863:3> col:3 kNoDialogNoText 'blink::(anonymous namespace)::BeforeUnloadUse'_3863", 
"        EnumConstantDecl 0x9e10a0 <line:3864:3> col:3 kNoDialogNoUserGesture 'blink::(anonymous namespace)::BeforeUnloadUse'_3864", 
"        EnumConstantDecl 0x9e10f0 <line:3865:3> col:3 kNoDialogMultipleConfirmationForNavigation 'blink::(anonymous namespace)::BeforeUnloadUse'_3865", 
"        EnumConstantDecl 0x9e1140 <line:3866:3> col:3 kShowDialog 'blink::(anonymous namespace)::BeforeUnloadUse'_3866", 
"        EnumConstantDecl 0x9e1190 <line:3867:3> col:3 referenced kNoDialogAutoCancelTrue 'blink::(anonymous namespace)::BeforeUnloadUse'_3867", 
"        EnumConstantDecl 0x9e1220 <line:3868:3, col:15> col:3 kMaxValue 'blink::(anonymous namespace)::BeforeUnloadUse'_3868", 
"          ConstantExpr 0x9e1200 <col:15> 'int'_3868", 
"            value: Int 4_3868", 
"            DeclRefExpr 0x9e11e0 <col:15> 'int' EnumConstant 0x9e1190 'kNoDialogAutoCancelTrue' 'blink::(anonymous namespace)::BeforeUnloadUse'_3868", 
"      FunctionDecl 0x9e1348 <line:3871:1, line:3873:1> line:3871:6 RecordBeforeUnloadUse 'void (blink::(anonymous namespace)::BeforeUnloadUse)'_3871", 
"        ParmVarDecl 0x9e1280 <col:28, col:44> col:44 used metric 'blink::(anonymous namespace)::BeforeUnloadUse'_3871", 
"        CompoundStmt 0x9e2978 <col:52, line:3873:1>_3871", 
"    FunctionDecl 0x9e77e0 <line:4907:1, line:4913:1> line:4907:17 invalid SkipDisplayNoneAncestors 'int *(int *)' static_4907", 
"      ParmVarDecl 0x9e7718 <col:42, col:51> col:51 invalid element 'int *'_4907", 
"      CompoundStmt 0x9e78f0 <col:60, line:4913:1>_4907", 
"        ReturnStmt 0x9e78e0 <line:4912:3, col:10>_4912", 
"          ImplicitCastExpr 0x9e78c8 <col:10> 'int *' <NullToPointer>_4912", 
"            CXXNullPtrLiteralExpr 0x9e78b8 <col:10> 'std::nullptr_t'_4912", 
"    FunctionDecl 0x9e7a10 <line:4915:1, line:4928:1> line:4915:17 invalid SkipDisplayNoneAncestorsOrReturnNullIfFlatTreeIsDirty 'int *(int &)' static_4915", 
"      ParmVarDecl 0x9e7940 <line:4916:5, col:14> col:14 invalid element 'int &'_4916", 
"      CompoundStmt 0x9e7b48 <col:23, line:4928:1>_4916", 
"        IfStmt 0x9e7b28 <line:4917:3, line:4926:3>_4917", 
"          RecoveryExpr 0x9e7ab8 <line:4917:7, col:51> 'bool' contains errors_4917", 
"          CompoundStmt 0x9e7b10 <col:54, line:4926:3>_4917", 
"            ReturnStmt 0x9e7b00 <line:4925:5, col:12>_4925", 
"              ImplicitCastExpr 0x9e7ae8 <col:12> 'int *' <NullToPointer>_4925", 
"                CXXNullPtrLiteralExpr 0x9e7ad8 <col:12> 'std::nullptr_t'_4925", 
"    FunctionDecl 0x9f2b58 <line:6757:1, line:6767:1> line:6757:13 invalid IsValidNameNonASCII 'bool (const int *, unsigned int)' static_6757", 
"      ParmVarDecl 0x9f2a08 <col:33, col:46> col:46 invalid characters 'const int *'_6757", 
"      ParmVarDecl 0x9f2a88 <col:58, col:67> col:67 used length 'unsigned int'_6757", 
"      CompoundStmt 0x9f4f58 <col:75, line:6767:1>_6757", 
"        IfStmt 0x9f2c68 <line:6758:3, line:6759:12>_6758", 
"          RecoveryExpr 0x9f2c28 <line:6758:7, col:38> 'bool' contains errors_6758", 
"          ReturnStmt 0x9f2c58 <line:6759:5, col:12>_6759", 
"            CXXBoolLiteralExpr 0x9f2c48 <col:12> 'bool' false_6759", 
"        ForStmt 0x9f4f00 <line:6761:3, line:6764:3>_6761", 
"          DeclStmt 0x9f2d40 <line:6761:8, col:22>_6761", 
"            VarDecl 0x9f2ca0 <col:8, col:21> col:17 used i 'unsigned int' cinit_6761", 
"              ImplicitCastExpr 0x9f2d28 <col:21> 'unsigned int' <IntegralCast>_6761", 
"                IntegerLiteral 0x9f2d08 <col:21> 'int' 1_6761", 
"          <<<NULL>>> _6761", 
"          BinaryOperator 0x9f2dc8 <col:24, col:28> 'bool' '<'_6761", 
"            ImplicitCastExpr 0x9f2d98 <col:24> 'unsigned int' <LValueToRValue>_6761", 
"              DeclRefExpr 0x9f2d58 <col:24> 'unsigned int' lvalue Var 0x9f2ca0 'i' 'unsigned int'_6761", 
"            ImplicitCastExpr 0x9f2db0 <col:28> 'unsigned int' <LValueToRValue>_6761", 
"              DeclRefExpr 0x9f2d78 <col:28> 'unsigned int' lvalue ParmVar 0x9f2a88 'length' 'unsigned int'_6761", 
"          UnaryOperator 0x9f2e08 <col:36, col:38> 'unsigned int' lvalue prefix '++'_6761", 
"            DeclRefExpr 0x9f2de8 <col:38> 'unsigned int' lvalue Var 0x9f2ca0 'i' 'unsigned int'_6761", 
"          CompoundStmt 0x9f2ea0 <col:41, line:6764:3>_6761", 
"            IfStmt 0x9f2e80 <line:6762:5, line:6763:14>_6762", 
"              RecoveryExpr 0x9f2e40 <line:6762:9, col:39> 'bool' contains errors_6762", 
"              ReturnStmt 0x9f2e70 <line:6763:7, col:14>_6763", 
"                CXXBoolLiteralExpr 0x9f2e60 <col:14> 'bool' false_6763", 
"        ReturnStmt 0x9f4f48 <line:6766:3, col:10>_6766", 
"          CXXBoolLiteralExpr 0x9f4f38 <col:10> 'bool' true_6766", 
"    FunctionDecl 0x9f50c0 <line:6769:1, line:6779:1> line:6769:13 invalid IsValidNameNonASCII 'bool (const int *, unsigned int)' static_6769", 
"      ParmVarDecl 0x9f4fa8 <col:33, col:46> col:46 invalid characters 'const int *'_6769", 
"      ParmVarDecl 0x9f5028 <col:58, col:67> col:67 used length 'unsigned int'_6769", 
"      CompoundStmt 0x9f5628 <col:75, line:6779:1>_6769", 
"        ForStmt 0x9f55d0 <line:6770:3, line:6776:3>_6770", 
"          DeclStmt 0x9f5238 <line:6770:8, col:22>_6770", 
"            VarDecl 0x9f5198 <col:8, col:21> col:17 used i 'unsigned int' cinit_6770", 
"              ImplicitCastExpr 0x9f5220 <col:21> 'unsigned int' <IntegralCast>_6770", 
"                IntegerLiteral 0x9f5200 <col:21> 'int' 0_6770", 
"          <<<NULL>>> _6770", 
"          BinaryOperator 0x9f52c0 <col:24, col:28> 'bool' '<'_6770", 
"            ImplicitCastExpr 0x9f5290 <col:24> 'unsigned int' <LValueToRValue>_6770", 
"              DeclRefExpr 0x9f5250 <col:24> 'unsigned int' lvalue Var 0x9f5198 'i' 'unsigned int'_6770", 
"            ImplicitCastExpr 0x9f52a8 <col:28> 'unsigned int' <LValueToRValue>_6770", 
"              DeclRefExpr 0x9f5270 <col:28> 'unsigned int' lvalue ParmVar 0x9f5028 'length' 'unsigned int'_6770", 
"          <<<NULL>>> _6770", 
"          CompoundStmt 0x9f55a8 <col:37, line:6776:3>_6770", 
"            DeclStmt 0x9f53e8 <line:6771:5, col:24>_6771", 
"              VarDecl 0x9f52f0 <col:5, col:23> col:10 used first 'bool' cinit_6771", 
"                BinaryOperator 0x9f53c8 <col:18, col:23> 'bool' '=='_6771", 
"                  ImplicitCastExpr 0x9f5398 <col:18> 'unsigned int' <LValueToRValue>_6771", 
"                    DeclRefExpr 0x9f5358 <col:18> 'unsigned int' lvalue Var 0x9f5198 'i' 'unsigned int'_6771", 
"                  ImplicitCastExpr 0x9f53b0 <col:23> 'unsigned int' <IntegralCast>_6771", 
"                    IntegerLiteral 0x9f5378 <col:23> 'int' 0_6771", 
"            DeclStmt 0x9f5490 <line:6772:5, col:14>_6772", 
"              VarDecl 0x9f5428 <col:5, col:13> col:13 invalid c 'int'_6772", 
"            IfStmt 0x9f5588 <line:6774:5, line:6775:14>_6774", 
"              RecoveryExpr 0x9f5548 <line:6774:9, col:58> 'bool' contains errors_6774", 
"              ReturnStmt 0x9f5578 <line:6775:7, col:14>_6775", 
"                CXXBoolLiteralExpr 0x9f5568 <col:14> 'bool' false_6775", 
"        ReturnStmt 0x9f5618 <line:6778:3, col:10>_6778", 
"          CXXBoolLiteralExpr 0x9f5608 <col:10> 'bool' true_6778", 
"    FunctionTemplateDecl 0x9f5908 <line:6781:1, line:6796:1> line:6782:20 IsValidNameASCII_6781", 
"      TemplateTypeParmDecl 0x9f5648 <line:6781:11, col:20> col:20 referenced typename depth 0 index 0 CharType_6781", 
"      FunctionDecl 0x9f5868 <line:6782:1, line:6796:1> line:6782:20 IsValidNameASCII 'bool (const CharType *, unsigned int)' static inline_6782", 
"        ParmVarDecl 0x9f5718 <col:37, col:53> col:53 referenced characters 'const CharType *'_6782", 
"        ParmVarDecl 0x9f5798 <line:6783:37, col:46> col:46 referenced length 'unsigned int'_6783", 
"        CompoundStmt 0x9f65b8 <col:54, line:6796:1>_6783", 
"          DeclStmt 0x9f5ac0 <line:6784:3, col:29>_6784", 
"            VarDecl 0x9f59f8 <col:3, col:28> col:12 referenced c 'CharType' cinit_6784", 
"              ArraySubscriptExpr 0x9f5aa0 <col:16, col:28> 'const CharType' lvalue_6784", 
"                DeclRefExpr 0x9f5a60 <col:16> 'const CharType *' lvalue ParmVar 0x9f5718 'characters' 'const CharType *'_6784", 
"                IntegerLiteral 0x9f5a80 <col:27> 'int' 0_6784", 
"          IfStmt 0x9f5ca8 <line:6785:3, line:6786:12>_6785", 
"            UnaryOperator 0x9f5c70 <line:6785:7, col:48> '<dependent type>' prefix '!' cannot overflow_6785", 
"              ParenExpr 0x9f5c50 <col:8, col:48> '<dependent type>'_6785", 
"                BinaryOperator 0x9f5c30 <col:9, col:45> '<dependent type>' ' '_6785", 
"                  BinaryOperator 0x9f5bb8 <col:9, col:33> '<dependent type>' ' '_6785", 
"                    CallExpr 0x9f5b38 <col:9, col:23> '<dependent type>'_6785", 
"                      UnresolvedLookupExpr 0x9f5ad8 <col:9> '<overloaded function type>' lvalue (ADL) = 'IsASCIIAlpha' empty_6785", 
"                      DeclRefExpr 0x9f5b18 <col:22> 'CharType' lvalue Var 0x9f59f8 'c' 'CharType'_6785", 
"                    BinaryOperator 0x9f5b98 <col:28, col:33> '<dependent type>' '=='_6785", 
"                      DeclRefExpr 0x9f5b60 <col:28> 'CharType' lvalue Var 0x9f59f8 'c' 'CharType'_6785", 
"                      CharacterLiteral 0x9f5b80 <col:33> 'char' 58_6785", 
"                  BinaryOperator 0x9f5c10 <col:40, col:45> '<dependent type>' '=='_6785", 
"                    DeclRefExpr 0x9f5bd8 <col:40> 'CharType' lvalue Var 0x9f59f8 'c' 'CharType'_6785", 
"                    CharacterLiteral 0x9f5bf8 <col:45> 'char' 95_6785", 
"            ReturnStmt 0x9f5c98 <line:6786:5, col:12>_6786", 
"              CXXBoolLiteralExpr 0x9f5c88 <col:12> 'bool' false_6786", 
"          ForStmt 0x9f6560 <line:6788:3, line:6793:3>_6788", 
"            DeclStmt 0x9f5d80 <line:6788:8, col:22>_6788", 
"              VarDecl 0x9f5ce0 <col:8, col:21> col:17 referenced i 'unsigned int' cinit_6788", 
"                ImplicitCastExpr 0x9f5d68 <col:21> 'unsigned int' <IntegralCast>_6788", 
"                  IntegerLiteral 0x9f5d48 <col:21> 'int' 1_6788", 
"            <<<NULL>>> _6788", 
"            BinaryOperator 0x9f5e08 <col:24, col:28> 'bool' '<'_6788", 
"              ImplicitCastExpr 0x9f5dd8 <col:24> 'unsigned int' <LValueToRValue>_6788", 
"                DeclRefExpr 0x9f5d98 <col:24> 'unsigned int' lvalue Var 0x9f5ce0 'i' 'unsigned int'_6788", 
"              ImplicitCastExpr 0x9f5df0 <col:28> 'unsigned int' <LValueToRValue>_6788", 
"                DeclRefExpr 0x9f5db8 <col:28> 'unsigned int' lvalue ParmVar 0x9f5798 'length' 'unsigned int'_6788", 
"            UnaryOperator 0x9f5e48 <col:36, col:38> 'unsigned int' lvalue prefix '++'_6788", 
"              DeclRefExpr 0x9f5e28 <col:38> 'unsigned int' lvalue Var 0x9f5ce0 'i' 'unsigned int'_6788", 
"            CompoundStmt 0x9f6540 <col:41, line:6793:3>_6788", 
"              BinaryOperator 0x9f5ee0 <line:6789:5, col:21> '<dependent type>' '='_6789", 
"                DeclRefExpr 0x9f5e60 <col:5> 'CharType' lvalue Var 0x9f59f8 'c' 'CharType'_6789", 
"                ArraySubscriptExpr 0x9f5ec0 <col:9, col:21> 'const CharType' lvalue_6789", 
"                  DeclRefExpr 0x9f5e80 <col:9> 'const CharType *' lvalue ParmVar 0x9f5718 'characters' 'const CharType *'_6789", 
"                  DeclRefExpr 0x9f5ea0 <col:20> 'unsigned int' lvalue Var 0x9f5ce0 'i' 'unsigned int'_6789", 
"              IfStmt 0x9f6520 <line:6790:5, line:6792:14>_6790", 
"                UnaryOperator 0x9f64e8 <line:6790:9, line:6791:19> '<dependent type>' prefix '!' cannot overflow_6790", 
"                  ParenExpr 0x9f64c8 <line:6790:10, line:6791:19> '<dependent type>'_6790", 
"                    BinaryOperator 0x9f64a8 <line:6790:11, line:6791:16> '<dependent type>' ' '_6790", 
"                      BinaryOperator 0x9f6430 <line:6790:11, col:66> '<dependent type>' ' '_6790", 
"                        BinaryOperator 0x9f63b8 <col:11, col:54> '<dependent type>' ' '_6790", 
"                          BinaryOperator 0x9f6340 <col:11, col:42> '<dependent type>' ' '_6790", 
"                            CallExpr 0x9f62c0 <col:11, col:32> '<dependent type>'_6790", 
"                              UnresolvedLookupExpr 0x9f6260 <col:11> '<overloaded function type>' lvalue (ADL) = 'IsASCIIAlphanumeric' empty_6790", 
"                              DeclRefExpr 0x9f62a0 <col:31> 'CharType' lvalue Var 0x9f59f8 'c' 'CharType'_6790", 
"                            BinaryOperator 0x9f6320 <col:37, col:42> '<dependent type>' '=='_6790", 
"                              DeclRefExpr 0x9f62e8 <col:37> 'CharType' lvalue Var 0x9f59f8 'c' 'CharType'_6790", 
"                              CharacterLiteral 0x9f6308 <col:42> 'char' 58_6790", 
"                          BinaryOperator 0x9f6398 <col:49, col:54> '<dependent type>' '=='_6790", 
"                            DeclRefExpr 0x9f6360 <col:49> 'CharType' lvalue Var 0x9f59f8 'c' 'CharType'_6790", 
"                            CharacterLiteral 0x9f6380 <col:54> 'char' 95_6790", 
"                        BinaryOperator 0x9f6410 <col:61, col:66> '<dependent type>' '=='_6790", 
"                          DeclRefExpr 0x9f63d8 <col:61> 'CharType' lvalue Var 0x9f59f8 'c' 'CharType'_6790", 
"                          CharacterLiteral 0x9f63f8 <col:66> 'char' 45_6790", 
"                      BinaryOperator 0x9f6488 <line:6791:11, col:16> '<dependent type>' '=='_6791", 
"                        DeclRefExpr 0x9f6450 <col:11> 'CharType' lvalue Var 0x9f59f8 'c' 'CharType'_6791", 
"                        CharacterLiteral 0x9f6470 <col:16> 'char' 46_6791", 
"                ReturnStmt 0x9f6510 <line:6792:7, col:14>_6792", 
"                  CXXBoolLiteralExpr 0x9f6500 <col:14> 'bool' false_6792", 
"          ReturnStmt 0x9f65a8 <line:6795:3, col:10>_6795", 
"            CXXBoolLiteralExpr 0x9f6598 <col:10> 'bool' true_6795", 
"    EnumDecl 0x9f6678 <line:6820:1, line:6827:1> line:6820:6 referenced QualifiedNameStatus_6820", 
"      EnumConstantDecl 0x9f6740 <line:6821:3> col:3 referenced kQNValid 'blink::QualifiedNameStatus'_6821", 
"      EnumConstantDecl 0x9f6790 <line:6822:3> col:3 referenced kQNMultipleColons 'blink::QualifiedNameStatus'_6822", 
"      EnumConstantDecl 0x9f67e0 <line:6823:3> col:3 referenced kQNInvalidStartChar 'blink::QualifiedNameStatus'_6823", 
"      EnumConstantDecl 0x9f6830 <line:6824:3> col:3 referenced kQNInvalidChar 'blink::QualifiedNameStatus'_6824", 
"      EnumConstantDecl 0x9f6880 <line:6825:3> col:3 referenced kQNEmptyPrefix 'blink::QualifiedNameStatus'_6825", 
"      EnumConstantDecl 0x9f68d0 <line:6826:3> col:3 referenced kQNEmptyLocalName 'blink::QualifiedNameStatus'_6826", 
"    CXXRecordDecl 0x9f6920 <line:6829:1, line:6837:1> line:6829:8 referenced invalid struct ParseQualifiedNameResult definition_6829", 
"      DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor_6829", 
"        DefaultConstructor exists trivial_6829", 
"        CopyConstructor simple trivial has_const_param implicit_has_const_param_6829", 
"        MoveConstructor exists simple trivial_6829", 
"        CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param_6829", 
"        MoveAssignment exists simple trivial needs_implicit_6829", 
"        Destructor simple irrelevant trivial needs_implicit_6829", 
"      CXXRecordDecl 0x9f6a38 <col:1, col:8> col:8 implicit referenced struct ParseQualifiedNameResult_6829", 
"      FieldDecl 0x9f6ad8 <line:6830:3, col:23> col:23 referenced status 'blink::QualifiedNameStatus'_6830", 
"      FieldDecl 0x9f6b50 <line:6831:3, col:11> col:11 invalid character 'int'_6831", 
"      CXXConstructorDecl 0x9f6c28 <line:6832:3, col:38> col:3 ParseQualifiedNameResult 'void ()' default trivial noexcept unevaluated 0x9f6c28_6832", 
"      CXXConstructorDecl 0x9f6da8 <line:6833:3, line:6834:25> line:6833:12 referenced ParseQualifiedNameResult 'void (blink::QualifiedNameStatus)'_6833", 
"        ParmVarDecl 0x9f6ce0 <col:37, col:57> col:57 used status 'blink::QualifiedNameStatus'_6833", 
"        CXXCtorInitializer Field 0x9f6ad8 'status' 'blink::QualifiedNameStatus'_6833", 
"          ImplicitCastExpr 0x9f7130 <line:6834:16> 'blink::QualifiedNameStatus' <LValueToRValue>_6834", 
"            DeclRefExpr 0x9f70f0 <col:16> 'blink::QualifiedNameStatus' lvalue ParmVar 0x9f6ce0 'status' 'blink::QualifiedNameStatus'_6834", 
"        CompoundStmt 0x9f7170 <col:24, col:25>_6834", 
"      CXXConstructorDecl 0x9f6fd8 <line:6835:3, line:6836:47> line:6835:3 invalid ParseQualifiedNameResult 'void (blink::QualifiedNameStatus, int)'_6835", 
"        ParmVarDecl 0x9f6e78 <col:28, col:48> col:48 used status 'blink::QualifiedNameStatus'_6835", 
"        ParmVarDecl 0x9f6f08 <col:56, col:64> col:64 invalid character 'int'_6835", 
"        CXXCtorInitializer Field 0x9f6ad8 'status' 'blink::QualifiedNameStatus'_6835", 
"          ImplicitCastExpr 0x9f71c0 <line:6836:16> 'blink::QualifiedNameStatus' <LValueToRValue>_6836", 
"            DeclRefExpr 0x9f7180 <col:16> 'blink::QualifiedNameStatus' lvalue ParmVar 0x9f6e78 'status' 'blink::QualifiedNameStatus'_6836", 
"        CompoundStmt 0x9f7200 <col:46, col:47>_6836", 
"      CXXConstructorDecl 0x9f9408 <line:6829:8> col:8 implicit constexpr ParseQualifiedNameResult 'void (const blink::ParseQualifiedNameResult &)' inline default trivial noexcept unevaluated 0x9f9408_6829", 
"        ParmVarDecl 0x9f9518 <col:8> col:8 'const blink::ParseQualifiedNameResult &'_6829", 
"      CXXConstructorDecl 0x9f95c8 <col:8> col:8 implicit used constexpr ParseQualifiedNameResult 'void (blink::ParseQualifiedNameResult &&) noexcept' inline default trivial_6829", 
"        ParmVarDecl 0x9f96d8 <col:8> col:8 used 'blink::ParseQualifiedNameResult &&'_6829", 
"        CXXCtorInitializer Field 0x9f6ad8 'status' 'blink::QualifiedNameStatus'_6829", 
"          ImplicitCastExpr 0x9f9890 <col:8> 'blink::QualifiedNameStatus' <LValueToRValue>_6829", 
"            MemberExpr 0x9f9860 <col:8> 'blink::QualifiedNameStatus' xvalue .status 0x9f6ad8_6829", 
"              CXXStaticCastExpr 0x9f9830 <col:8> 'blink::ParseQualifiedNameResult' xvalue static_cast<struct blink::ParseQualifiedNameResult &&> <NoOp>_6829", 
"                DeclRefExpr 0x9f9800 <col:8> 'blink::ParseQualifiedNameResult' lvalue ParmVar 0x9f96d8 '' 'blink::ParseQualifiedNameResult &&'_6829", 
"        CompoundStmt 0x9f98d0 <col:8>_6829", 
"    FunctionTemplateDecl 0x9f8e08 <line:6839:1, line:6884:1> line:6840:33 invalid ParseQualifiedNameInternal_6839", 
"      TemplateTypeParmDecl 0x9f7210 <line:6839:11, col:20> col:20 referenced typename depth 0 index 0 CharType_6839", 
"      FunctionDecl 0x9f8d68 <line:6840:1, line:6884:1> line:6840:33 invalid ParseQualifiedNameInternal 'blink::ParseQualifiedNameResult (const int &, const CharType *, unsigned int, int &, int &)' static_6840", 
"        ParmVarDecl 0x9f89d8 <line:6841:5, col:25> col:25 invalid qualified_name 'const int &'_6841", 
"        ParmVarDecl 0x9f8a78 <line:6842:5, col:21> col:21 referenced characters 'const CharType *'_6842", 
"        ParmVarDecl 0x9f8af8 <line:6843:5, col:14> col:14 referenced length 'unsigned int'_6843", 
"        ParmVarDecl 0x9f8b88 <line:6844:5, col:19> col:19 invalid prefix 'int &'_6844", 
"        ParmVarDecl 0x9f8c18 <line:6845:5, col:19> col:19 invalid local_name 'int &'_6845", 
"        CompoundStmt 0x9fa978 <col:31, line:6884:1>_6845", 
"          DeclStmt 0x9f8f10 <line:6846:3, col:25>_6846", 
"            VarDecl 0x9f8e98 <col:3, col:21> col:8 referenced name_start 'bool' cinit_6846", 
"              CXXBoolLiteralExpr 0x9f8f00 <col:21> 'bool' true_6846", 
"          DeclStmt 0x9f8fb0 <line:6847:3, col:25>_6847", 
"            VarDecl 0x9f8f38 <col:3, col:20> col:8 referenced saw_colon 'bool' cinit_6847", 
"              CXXBoolLiteralExpr 0x9f8fa0 <col:20> 'bool' false_6847", 
"          DeclStmt 0x9f9080 <line:6848:3, col:25>_6848", 
"            VarDecl 0x9f8fe0 <col:3, col:24> col:12 referenced colon_pos 'unsigned int' cinit_6848", 
"              ImplicitCastExpr 0x9f9068 <col:24> 'unsigned int' <IntegralCast>_6848", 
"                IntegerLiteral 0x9f9048 <col:24> 'int' 0_6848", 
"          ForStmt 0x9fa1c0 <line:6850:3, line:6867:3>_6850", 
"            DeclStmt 0x9f9150 <line:6850:8, col:22>_6850", 
"              VarDecl 0x9f90b0 <col:8, col:21> col:17 referenced i 'unsigned int' cinit_6850", 
"                ImplicitCastExpr 0x9f9138 <col:21> 'unsigned int' <IntegralCast>_6850", 
"                  IntegerLiteral 0x9f9118 <col:21> 'int' 0_6850", 
"            <<<NULL>>> _6850", 
"            BinaryOperator 0x9f91d8 <col:24, col:28> 'bool' '<'_6850", 
"              ImplicitCastExpr 0x9f91a8 <col:24> 'unsigned int' <LValueToRValue>_6850", 
"                DeclRefExpr 0x9f9168 <col:24> 'unsigned int' lvalue Var 0x9f90b0 'i' 'unsigned int'_6850", 
"              ImplicitCastExpr 0x9f91c0 <col:28> 'unsigned int' <LValueToRValue>_6850", 
"                DeclRefExpr 0x9f9188 <col:28> 'unsigned int' lvalue ParmVar 0x9f8af8 'length' 'unsigned int'_6850", 
"            <<<NULL>>> _6850", 
"            CompoundStmt 0x9fa1a0 <col:37, line:6867:3>_6850", 
"              DeclStmt 0x9f9288 <line:6851:5, col:14>_6851", 
"                VarDecl 0x9f9220 <col:5, col:13> col:13 invalid c 'int'_6851", 
"              IfStmt 0x9fa170 <line:6853:5, line:6866:5> has_else_6853", 
"                RecoveryExpr 0x9f9358 <line:6853:9, col:14> 'bool' contains errors_6853", 
"                CompoundStmt 0x9f9fc0 <col:19, line:6859:5>_6853", 
"                  IfStmt 0x9f9938 <line:6854:7, line:6855:58>_6854", 
"                    ImplicitCastExpr 0x9f9398 <line:6854:11> 'bool' <LValueToRValue>_6854", 
"                      DeclRefExpr 0x9f9378 <col:11> 'bool' lvalue Var 0x9f8f38 'saw_colon' 'bool'_6854", 
"                    ReturnStmt 0x9f9928 <line:6855:9, col:58>_6855", 
"                      ExprWithCleanups 0x9f9910 <col:16, col:58> 'blink::ParseQualifiedNameResult'_6855", 
"                        CXXConstructExpr 0x9f98e0 <col:16, col:58> 'blink::ParseQualifiedNameResult' 'void (blink::ParseQualifiedNameResult &&) noexcept' elidable_6855", 
"                          MaterializeTemporaryExpr 0x9f97b0 <col:16, col:58> 'blink::ParseQualifiedNameResult' xvalue_6855", 
"                            CXXFunctionalCastExpr 0x9f9788 <col:16, col:58> 'blink::ParseQualifiedNameResult' functional cast to struct blink::ParseQualifiedNameResult <ConstructorConversion>_6855", 
"                              CXXConstructExpr 0x9f9758 <col:16, col:58> 'blink::ParseQualifiedNameResult' 'void (blink::QualifiedNameStatus)'_6855", 
"                                DeclRefExpr 0x9f93c0 <col:41> 'blink::QualifiedNameStatus' EnumConstant 0x9f6790 'kQNMultipleColons' 'blink::QualifiedNameStatus'_6855", 
"                  BinaryOperator 0x9f9e80 <line:6856:7, col:20> 'bool' lvalue '='_6856", 
"                    DeclRefExpr 0x9f9e50 <col:7> 'bool' lvalue Var 0x9f8e98 'name_start' 'bool'_6856", 
"                    CXXBoolLiteralExpr 0x9f9e70 <col:20> 'bool' true_6856", 
"                  BinaryOperator 0x9f9ed0 <line:6857:7, col:19> 'bool' lvalue '='_6857", 
"                    DeclRefExpr 0x9f9ea0 <col:7> 'bool' lvalue Var 0x9f8f38 'saw_colon' 'bool'_6857", 
"                    CXXBoolLiteralExpr 0x9f9ec0 <col:19> 'bool' true_6857", 
"                  BinaryOperator 0x9f9fa0 <line:6858:7, col:23> 'unsigned int' lvalue '='_6858", 
"                    DeclRefExpr 0x9f9ef0 <col:7> 'unsigned int' lvalue Var 0x9f8fe0 'colon_pos' 'unsigned int'_6858", 
"                    BinaryOperator 0x9f9f80 <col:19, col:23> 'unsigned int' ' '_6858", 
"                      ImplicitCastExpr 0x9f9f50 <col:19> 'unsigned int' <LValueToRValue>_6858", 
"                        DeclRefExpr 0x9f9f10 <col:19> 'unsigned int' lvalue Var 0x9f90b0 'i' 'unsigned int'_6858", 
"                      ImplicitCastExpr 0x9f9f68 <col:23> 'unsigned int' <IntegralCast>_6858", 
"                        IntegerLiteral 0x9f9f30 <col:23> 'int' 1_6858", 
"                IfStmt 0x9fa140 <line:6859:12, line:6866:5> has_else_6859", 
"                  ImplicitCastExpr 0x9fa010 <line:6859:16> 'bool' <LValueToRValue>_6859", 
"                    DeclRefExpr 0x9f9ff0 <col:16> 'bool' lvalue Var 0x9f8e98 'name_start' 'bool'_6859", 
"                  CompoundStmt 0x9fa0c8 <col:28, line:6863:5>_6859", 
"                    BinaryOperator 0x9fa0a8 <line:6862:7, col:20> 'bool' lvalue '='_6862", 
"                      DeclRefExpr 0x9fa078 <col:7> 'bool' lvalue Var 0x9f8e98 'name_start' 'bool'_6862", 
"                      CXXBoolLiteralExpr 0x9fa098 <col:20> 'bool' false_6862", 
"                  CompoundStmt 0x9fa130 <line:6863:12, line:6866:5>_6863", 
"          IfStmt 0x9fa718 <line:6869:3, line:6878:3> has_else_6869", 
"            UnaryOperator 0x9fa230 <line:6869:7, col:8> 'bool' prefix '!' cannot overflow_6869", 
"              ImplicitCastExpr 0x9fa218 <col:8> 'bool' <LValueToRValue>_6869", 
"                DeclRefExpr 0x9fa1f8 <col:8> 'bool' lvalue Var 0x9f8f38 'saw_colon' 'bool'_6869", 
"            CompoundStmt 0x9fa248 <col:19, line:6872:3>_6869", 
"            CompoundStmt 0x9fa6f8 <col:10, line:6878:3>_6869", 
"              IfStmt 0x9fa420 <line:6874:5, line:6875:53>_6874", 
"                RecoveryExpr 0x9fa308 <line:6874:9, col:22> 'bool' contains errors_6874", 
"                ReturnStmt 0x9fa410 <line:6875:7, col:53>_6875", 
"                  ExprWithCleanups 0x9fa3f8 <col:14, col:53> 'blink::ParseQualifiedNameResult'_6875", 
"                    CXXConstructExpr 0x9fa3c8 <col:14, col:53> 'blink::ParseQualifiedNameResult' 'void (blink::ParseQualifiedNameResult &&) noexcept' elidable_6875", 
"                      MaterializeTemporaryExpr 0x9fa3b0 <col:14, col:53> 'blink::ParseQualifiedNameResult' xvalue_6875", 
"                        CXXFunctionalCastExpr 0x9fa388 <col:14, col:53> 'blink::ParseQualifiedNameResult' functional cast to struct blink::ParseQualifiedNameResult <ConstructorConversion>_6875", 
"                          CXXConstructExpr 0x9fa358 <col:14, col:53> 'blink::ParseQualifiedNameResult' 'void (blink::QualifiedNameStatus)'_6875", 
"                            DeclRefExpr 0x9fa338 <col:39> 'blink::QualifiedNameStatus' EnumConstant 0x9f6880 'kQNEmptyPrefix' 'blink::QualifiedNameStatus'_6875", 
"              DeclStmt 0x9fa568 <line:6876:5, col:37>_6876", 
"                VarDecl 0x9fa458 <col:5, col:36> col:9 referenced prefix_start 'int' cinit_6876", 
"                  ImplicitCastExpr 0x9fa550 <col:24, col:36> 'int' <IntegralCast>_6876", 
"                    BinaryOperator 0x9fa530 <col:24, col:36> 'unsigned int' '+'_6876", 
"                      ImplicitCastExpr 0x9fa500 <col:24> 'unsigned int' <LValueToRValue>_6876", 
"                        DeclRefExpr 0x9fa4c0 <col:24> 'unsigned int' lvalue Var 0x9f8fe0 'colon_pos' 'unsigned int'_6876", 
"                      ImplicitCastExpr 0x9fa518 <col:36> 'unsigned int' <IntegralCast>_6876", 
"                        IntegerLiteral 0x9fa4e0 <col:36> 'int' 1_6876", 
"          IfStmt 0x9fa860 <line:6880:3, line:6881:54>_6880", 
"            RecoveryExpr 0x9fa748 <line:6880:7, col:24> 'bool' contains errors_6880", 
"            ReturnStmt 0x9fa850 <line:6881:5, col:54>_6881", 
"              ExprWithCleanups 0x9fa838 <col:12, col:54> 'blink::ParseQualifiedNameResult'_6881", 
"                CXXConstructExpr 0x9fa808 <col:12, col:54> 'blink::ParseQualifiedNameResult' 'void (blink::ParseQualifiedNameResult &&) noexcept' elidable_6881", 
"                  MaterializeTemporaryExpr 0x9fa7f0 <col:12, col:54> 'blink::ParseQualifiedNameResult' xvalue_6881", 
"                    CXXFunctionalCastExpr 0x9fa7c8 <col:12, col:54> 'blink::ParseQualifiedNameResult' functional cast to struct blink::ParseQualifiedNameResult <ConstructorConversion>_6881", 
"                      CXXConstructExpr 0x9fa798 <col:12, col:54> 'blink::ParseQualifiedNameResult' 'void (blink::QualifiedNameStatus)'_6881", 
"                        DeclRefExpr 0x9fa778 <col:37> 'blink::QualifiedNameStatus' EnumConstant 0x9f68d0 'kQNEmptyLocalName' 'blink::QualifiedNameStatus'_6881", 
"          ReturnStmt 0x9fa968 <line:6883:3, col:43>_6883", 
"            ExprWithCleanups 0x9fa950 <col:10, col:43> 'blink::ParseQualifiedNameResult'_6883", 
"              CXXConstructExpr 0x9fa920 <col:10, col:43> 'blink::ParseQualifiedNameResult' 'void (blink::ParseQualifiedNameResult &&) noexcept' elidable_6883", 
"                MaterializeTemporaryExpr 0x9fa908 <col:10, col:43> 'blink::ParseQualifiedNameResult' xvalue_6883", 
"                  CXXFunctionalCastExpr 0x9fa8e0 <col:10, col:43> 'blink::ParseQualifiedNameResult' functional cast to struct blink::ParseQualifiedNameResult <ConstructorConversion>_6883", 
"                    CXXConstructExpr 0x9fa8b0 <col:10, col:43> 'blink::ParseQualifiedNameResult' 'void (blink::QualifiedNameStatus)'_6883", 
"                      DeclRefExpr 0x9fa890 <col:35> 'blink::QualifiedNameStatus' EnumConstant 0x9f6740 'kQNValid' 'blink::QualifiedNameStatus'_6883", 
"    FunctionDecl 0x9fc080 <line:7590:1, line:7603:1> line:7590:25 invalid GetLinkElement 'int *(const int *, bool (*)(int &))' static_7590", 
"      ParmVarDecl 0x9fbd70 <col:40, col:56> col:56 invalid doc 'const int *'_7590", 
"      ParmVarDecl 0x9fbf60 <line:7591:40, col:73> col:47 used match_fn 'bool (*)(int &)'_7591", 
"      CompoundStmt 0x9ff3e0 <col:76, line:7603:1>_7591", 
"        DeclStmt 0x9fc1c0 <line:7592:3, col:38>_7592", 
"          VarDecl 0x9fc158 <col:3, col:20> col:20 invalid head 'int *'_7592", 
"        IfStmt 0x9ff270 <line:7593:3, line:7594:12>_7593", 
"          RecoveryExpr 0x9fc1d8 <line:7593:7, col:8> 'bool' contains errors_7593", 
"          ReturnStmt 0x9ff260 <line:7594:5, col:12>_7594", 
"            ImplicitCastExpr 0x9fc208 <col:12> 'int *' <NullToPointer>_7594", 
"              CXXNullPtrLiteralExpr 0x9fc1f8 <col:12> 'std::nullptr_t'_7594", 
"        ReturnStmt 0x9ff3d0 <line:7602:3, col:10>_7602", 
"          ImplicitCastExpr 0x9ff3b8 <col:10> 'int *' <NullToPointer>_7602", 
"            CXXNullPtrLiteralExpr 0x9ff3a8 <col:10> 'std::nullptr_t'_7602", 
"    FunctionDecl 0xa02480 <line:8039:1, line:8052:1> line:8039:7 invalid EventTargetNodeForDocument 'int *(int *)'_8039", 
"      ParmVarDecl 0xa023e8 <col:34, col:44> col:44 invalid doc 'int *'_8039", 
"      CompoundStmt 0xa027e0 <col:49, line:8052:1>_8039", 
"        IfStmt 0xa02580 <line:8040:3, line:8041:12>_8040", 
"          RecoveryExpr 0xa02528 <line:8040:7, col:8> 'bool' contains errors_8040", 
"          ReturnStmt 0xa02570 <line:8041:5, col:12>_8041", 
"            ImplicitCastExpr 0xa02558 <col:12> 'int *' <NullToPointer>_8041", 
"              CXXNullPtrLiteralExpr 0xa02548 <col:12> 'std::nullptr_t'_8041", 
"        DeclStmt 0xa02630 <line:8042:3, col:37>_8042", 
"          VarDecl 0xa025c8 <col:3, col:9> col:9 invalid node 'int *'_8042", 
"        DeclStmt 0xa02718 <line:8043:3, col:57>_8043", 
"          VarDecl 0xa02690 <col:3, col:9> col:9 invalid plugin_document 'auto *'_8043", 
"        IfStmt 0xa02760 <line:8044:3, line:8046:3>_8044", 
"          RecoveryExpr 0xa02730 <line:8044:7, col:27> 'bool' contains errors_8044", 
"          CompoundStmt 0xa02750 <col:33, line:8046:3>_8044", 
"    FunctionTemplateDecl 0xa04ae8 <line:8564:1, line:8574:1> line:8565:6 invalid ShouldInvalidateNodeListCachesForAttr_8564", 
"      NonTypeTemplateParmDecl 0xa04848 <line:8564:11, col:20> col:20 referenced 'unsigned int' depth 0 index 0 type_8564", 
"      FunctionDecl 0xa04a48 <line:8565:1, line:8574:1> line:8565:6 invalid ShouldInvalidateNodeListCachesForAttr 'bool (const int &, const int &)'_8565", 
"        ParmVarDecl 0xa048e8 <line:8566:5, col:33> col:33 invalid node_lists 'const int &'_8566", 
"        ParmVarDecl 0xa04978 <line:8567:5, col:26> col:26 invalid attr_name 'const int &'_8567", 
"        CompoundStmt 0xa04eb8 <col:37, line:8574:1>_8567", 
"          DeclStmt 0xa04d10 <line:8568:3, col:71>_8568", 
"            VarDecl 0xa04b90 <col:3, col:66> col:8 referenced invalidation_type 'unsigned int':'unsigned int' cinit_8568", 
"              DeclRefExpr 0xa04c08 <col:66> 'unsigned int' NonTypeTemplateParm 0xa04848 'type' 'unsigned int'_8568", 
"          IfStmt 0xa04da8 <line:8569:3, line:8572:12>_8569", 
"            RecoveryExpr 0xa04d68 <line:8569:7, line:8571:72> 'bool' contains errors_8569", 
"            ReturnStmt 0xa04d98 <line:8572:5, col:12>_8572", 
"              CXXBoolLiteralExpr 0xa04d88 <col:12> 'bool' true_8572", 
"    CXXRecordDecl 0xa050a8 <line:9129:10, col:16> col:16 class CORE_TEMPLATE_EXPORT_9129", 
"  FunctionDecl 0xa051b8 <line:9133:1, line:9137:1> line:9133:25 invalid LiveDocumentSet 'int &()' static_9133", 
"    CompoundStmt 0xa08350 <col:43, line:9137:1>_9133", 
"  FunctionDecl 0xa08380 <line:9139:1, line:9146:1> line:9139:6 ShowLiveDocumentInstances 'void ()'_9139", 
"    CompoundStmt 0xa087c8 <col:34, line:9146:1>_9139", 
"      DeclStmt 0xa084f8 <line:9140:3, col:43>_9140", 
"        VarDecl 0xa08490 <col:3, col:20> col:20 invalid set 'int &'_9140", 
